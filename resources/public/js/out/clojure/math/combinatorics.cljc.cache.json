["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$update"]],"~:name","~$clojure.math.combinatorics","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$+'",["^ ","^8","~$clojure.math.combinatorics/+'","~:file","resources/public/js/out/clojure/math/combinatorics.cljc","~:line",82,"~:column",10,"~:end-line",82,"~:end-column",17,"~:meta",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",82,"^C",15,"^D",82,"^E",17],"~:tag","~$number"],"~$expt-int",["^ ","~:protocol-inline",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",502,"^C",8,"^D",502,"^E",16,"~:private",true,"~:arglists",["~#list",["~$quote",["^M",[["~$base","~$pow"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/expt-int","~:variadic",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",16,"~:method-params",["^M",[["^O","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^C",1,"^B",502,"^D",502,"~:max-fixed-arity",2,"~:fn-var",true,"^L",["^M",["^N",["^M",[["^O","^P"]]]]]],"~$permutation-index-duplicates",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",604,"^C",8,"^D",604,"^E",36,"^K",true,"^L",["^M",["^N",["^M",[["~$l"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/permutation-index-duplicates","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",36,"^S",["^M",[["~$l"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",604,"^D",604,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$l"]]]]]],"~$nth-combination",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",556,"^C",7,"^D",556,"^E",22,"^L",["^M",["^N",["^M",[["~$items","~$t","~$n"]]]]],"~:doc","The nth element of the sequence of t-combinations of items"],"^8","~$clojure.math.combinatorics/nth-combination","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",22,"^S",["^M",[["^[","~$t","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",556,"^D",556,"^V",3,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items"],"~$partitions",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",906,"^C",7,"^D",906,"^E",17,"^L",["^M",["^N",["^M",[["^[","~$&","~$args"]]]]],"^10","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into.","~:top-fn",["^ ","^R",true,"^V",1,"^S",[["^M",["^[","^13"]]],"^L",["^M",[["^[","~$&","^13"]]],"^U",["^M",[null]]]],"^8","~$clojure.math.combinatorics/partitions","^R",true,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",17,"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["^[","^13"]]],"^L",["^M",[["^[","~$&","^13"]]],"^U",["^M",[null]]],"^S",[["^M",["^[","^13"]]],"^T",null,"^U",["^M",[null]],"^C",1,"^B",906,"^D",906,"^V",1,"^W",true,"^L",["^M",[["^[","~$&","^13"]]],"^10","All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."],"~$all-different?",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",84,"^C",8,"^D",84,"^E",22,"^K",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"],"^K",true,"^8","~$clojure.math.combinatorics/all-different?","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",22,"^S",["^M",[["~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",84,"^D",84,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"],"~$nth-permutation-duplicates",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",401,"^C",8,"^D",401,"^E",34,"^K",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^K",true,"^8","~$clojure.math.combinatorics/nth-permutation-duplicates","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",34,"^S",["^M",[["~$l","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",401,"^D",401,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$count-permutations-from-frequencies",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",340,"^C",8,"^D",340,"^E",43,"^K",true,"^L",["^M",["^N",["^M",[["~$freqs"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/count-permutations-from-frequencies","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",43,"^S",["^M",[["^1;"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",340,"^D",340,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^1;"]]]]]],"~$nth-combination-freqs",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",539,"^C",8,"^D",539,"^E",29,"^K",true,"^L",["^M",["^N",["^M",[["^1;","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"^K",true,"^8","~$clojure.math.combinatorics/nth-combination-freqs","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",29,"^S",["^M",[["^1;","~$t","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",539,"^D",539,"^V",3,"^W",true,"^L",["^M",["^N",["^M",[["^1;","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"],"~$partitions-M",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",880,"^C",8,"^D",880,"^E",20,"^K",true,"^L",["^M",["^N",["^M",[["^[","~$&",["^ ","~$from","~:min","~$to","~:max"]]]]]],"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["^[",["^ ","^1@","^1A","^1B","^1C"]]]],"^L",["^M",[["^[","~$&",["^ ","^1@","^1A","^1B","^1C"]]]],"^U",["^M",[null]]]],"^K",true,"^8","~$clojure.math.combinatorics/partitions-M","^R",true,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",20,"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["^[",["^ ","^1@","^1A","^1B","^1C"]]]],"^L",["^M",[["^[","~$&",["^ ","^1@","^1A","^1B","^1C"]]]],"^U",["^M",[null]]],"^S",[["^M",["^[",["^ ","^1@","^1A","^1B","^1C"]]]],"^T",null,"^U",["^M",[null]],"^C",1,"^B",880,"^D",880,"^V",1,"^W",true,"^L",["^M",[["^[","~$&",["^ ","^1@","^1A","^1B","^1C"]]]]],"~$nth-permutation",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",419,"^C",7,"^D",419,"^E",22,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","(nth (permutations items)) but calculated more directly."],"^8","~$clojure.math.combinatorics/nth-permutation","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",22,"^S",["^M",[["^[","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",419,"^D",419,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","(nth (permutations items)) but calculated more directly."],"~$remove-nth",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",316,"^C",8,"^D",316,"^E",18,"^K",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/remove-nth","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",18,"^S",["^M",[["~$l","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",316,"^D",316,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]]],"~$n-take-k",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",463,"^C",8,"^D",463,"^E",16,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$k"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/n-take-k","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",16,"^S",["^M",[["~$n","~$k"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",463,"^D",463,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$n","~$k"]]]]]],"~$permutation-index-distinct",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",596,"^C",8,"^D",596,"^E",34,"^K",true,"^L",["^M",["^N",["^M",[["~$l"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/permutation-index-distinct","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",34,"^S",["^M",[["~$l"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",596,"^D",596,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$l"]]]]]],"~$partitions-H",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",729,"^C",8,"^D",729,"^E",20,"^K",true,"^L",["^M",["^N",["^M",[["^[","~$&","^13"]]]]],"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["^[","^13"]]],"^L",["^M",[["^[","~$&","^13"]]],"^U",["^M",[null]]]],"^K",true,"^8","~$clojure.math.combinatorics/partitions-H","^R",true,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",20,"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["^[","^13"]]],"^L",["^M",[["^[","~$&","^13"]]],"^U",["^M",[null]]],"^S",[["^M",["^[","^13"]]],"^T",null,"^U",["^M",[null]],"^C",1,"^B",729,"^D",729,"^V",1,"^W",true,"^L",["^M",[["^[","~$&","^13"]]]],"~$growth-strings-H",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",659,"^C",8,"^D",659,"^E",24,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]]],"^14",["^ ","^R",false,"^V",5,"^S",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^L",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^U",["^M",[null,null]]]],"^K",true,"^8","~$clojure.math.combinatorics/growth-strings-H","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^14",["^ ","^R",false,"^V",5,"^S",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^L",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^U",["^M",[null,null]]],"^S",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",659,"^D",659,"^V",5,"^W",true,"^L",["^M",[["~$n","~$r","~$s"],["~$n","~$a","~$b","~$r","~$s"]]]],"~$reify-bool",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",649,"^C",12,"^D",649,"^E",22,"^K",true,"^L",["^M",["^N",["^M",[["~$statement"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/reify-bool","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",22,"^S",["^M",[["^1R"]]],"^T",null,"^U",["^M",[null,null]],"^C",5,"^B",649,"^D",649,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^1R"]]]]]],"~$count-subsets-unmemoized",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",510,"^C",8,"^D",510,"^E",32,"^K",true,"^L",["^M",["^N",["^M",[["^["]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/count-subsets-unmemoized","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",32,"^S",["^M",[["^["]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",510,"^D",510,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^["]]]]]],"~$lex-partitions-H",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",710,"^C",8,"^D",710,"^E",24,"^K",true,"^L",["^M",["^N",["^M",[["~$N","~$&",["^ ","^1@","^1A","^1B","^1C"]]]]]],"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["~$N",["^ ","^1@","^1A","^1B","^1C"]]]],"^L",["^M",[["~$N","~$&",["^ ","^1@","^1A","^1B","^1C"]]]],"^U",["^M",[null]]]],"^K",true,"^8","~$clojure.math.combinatorics/lex-partitions-H","^R",true,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^14",["^ ","^R",true,"^V",1,"^S",[["^M",["~$N",["^ ","^1@","^1A","^1B","^1C"]]]],"^L",["^M",[["~$N","~$&",["^ ","^1@","^1A","^1B","^1C"]]]],"^U",["^M",[null]]],"^S",[["^M",["~$N",["^ ","^1@","^1A","^1B","^1C"]]]],"^T",null,"^U",["^M",[null]],"^C",1,"^B",710,"^D",710,"^V",1,"^W",true,"^L",["^M",[["~$N","~$&",["^ ","^1@","^1A","^1B","^1C"]]]]],"~$nth-combination-distinct",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",525,"^C",8,"^D",525,"^E",32,"^K",true,"^L",["^M",["^N",["^M",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"^K",true,"^8","~$clojure.math.combinatorics/nth-combination-distinct","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",32,"^S",["^M",[["^[","~$t","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",525,"^D",525,"^V",3,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$t","~$n"]]]]],"^10","The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"],"~$drop-permutations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",437,"^C",7,"^D",437,"^E",24,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","(drop n (permutations items)) but calculated more directly."],"^8","~$clojure.math.combinatorics/drop-permutations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^S",["^M",[["^[","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",437,"^D",437,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","(drop n (permutations items)) but calculated more directly."],"~$factorial-numbers",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",304,"^C",8,"^D",304,"^E",25,"^K",true,"^L",["^M",["^N",["^M",[["~$n"]]]]],"^10","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"^K",true,"^8","~$clojure.math.combinatorics/factorial-numbers","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",25,"^S",["^M",[["~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",304,"^D",304,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$n"]]]]],"^10","Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"],"~$count-combinations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",496,"^C",7,"^D",496,"^E",25,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","(count (combinations items t)) but computed more directly"],"^8","~$clojure.math.combinatorics/count-combinations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",25,"^S",["^M",[["^[","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",496,"^D",496,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","(count (combinations items t)) but computed more directly"],"~$m5",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",834,"^C",8,"^D",834,"^E",10,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/m5","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",10,"^S",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",834,"^D",834,"^V",11,"^W",true,"^L",["^M",["^N",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$cartesian-product",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",208,"^C",7,"^D",208,"^E",24,"^L",["^M",["^N",["^M",[["~$&","~$seqs"]]]]],"^10","All the ways to take one item from each sequence","^14",["^ ","^R",true,"^V",0,"^S",[["^M",["^27"]]],"^L",["^M",[["~$&","^27"]]],"^U",["^M",[null]]]],"^8","~$clojure.math.combinatorics/cartesian-product","^R",true,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^14",["^ ","^R",true,"^V",0,"^S",[["^M",["^27"]]],"^L",["^M",[["~$&","^27"]]],"^U",["^M",[null]]],"^S",[["^M",["^27"]]],"^T",null,"^U",["^M",[null]],"^C",1,"^B",208,"^D",208,"^V",0,"^W",true,"^L",["^M",[["~$&","^27"]]],"^10","All the ways to take one item from each sequence"],"~$permutations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",280,"^C",7,"^D",280,"^E",19,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."],"^8","~$clojure.math.combinatorics/permutations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",19,"^S",["^M",[["^["]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",280,"^D",280,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."],"~$initial-perm-numbers",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",352,"^C",8,"^D",352,"^E",28,"^K",true,"^L",["^M",["^N",["^M",[["^1;"]]]]],"^10","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"^K",true,"^8","~$clojure.math.combinatorics/initial-perm-numbers","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",28,"^S",["^M",[["^1;"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",352,"^D",352,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^1;"]]]]],"^10","Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"],"~$count-subsets",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",518,"^C",7,"^D",518,"^E",20,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","(count (subsets items)) but computed more directly"],"^8","~$clojure.math.combinatorics/count-subsets","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",20,"^S",["^M",[["^["]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",518,"^D",518,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","(count (subsets items)) but computed more directly"],"~$factorial-numbers-with-duplicates",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",389,"^C",8,"^D",389,"^E",41,"^K",true,"^L",["^M",["^N",["^M",[["~$n","^1;"]]]]],"^10","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"^K",true,"^8","~$clojure.math.combinatorics/factorial-numbers-with-duplicates","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",41,"^S",["^M",[["~$n","^1;"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",389,"^D",389,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$n","^1;"]]]]],"^10","Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"],"~$init",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",652,"^C",8,"^D",652,"^E",12,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$s"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/init","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",12,"^S",["^M",[["~$n","~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",652,"^D",652,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$n","~$s"]]]]]],"~$selections",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",228,"^C",7,"^D",228,"^E",17,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","All the ways of taking n (possibly the same) elements from the sequence of items"],"^8","~$clojure.math.combinatorics/selections","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",17,"^S",["^M",[["^[","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",228,"^D",228,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]],"^10","All the ways of taking n (possibly the same) elements from the sequence of items"],"~$factorial",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",299,"^C",8,"^D",299,"^E",17,"^K",true,"^L",["^M",["^N",["^M",[["~$n"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/factorial","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",17,"^S",["^M",[["~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",299,"^D",299,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$n"]]]]]],"~$dec-key",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",384,"^C",8,"^D",384,"^E",15,"^K",true,"^L",["^M",["^N",["^M",[["~$m","~$k"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/dec-key","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",15,"^S",["^M",[["~$m","~$k"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",384,"^D",384,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$m","~$k"]]]]]],"~$lex-permutations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",252,"^C",8,"^D",252,"^E",24,"^K",true,"^L",["^M",["^N",["^M",[["~$c"]]]]],"^10","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization.","~:deprecated","1.3"],"^K",true,"^8","~$clojure.math.combinatorics/lex-permutations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^S",["^M",[["~$c"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",252,"^2J","1.3","^D",252,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$c"]]]]],"^10","DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."],"~$sorted-numbers?",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",264,"^C",8,"^D",264,"^E",23,"^K",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Returns true iff s is a sequence of numbers in non-decreasing order"],"^K",true,"^8","~$clojure.math.combinatorics/sorted-numbers?","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",23,"^S",["^M",[["~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",264,"^D",264,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Returns true iff s is a sequence of numbers in non-decreasing order"],"~$index-combinations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",92,"^C",8,"^D",92,"^E",26,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$cnt"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/index-combinations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",26,"^S",["^M",[["~$n","^2O"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",92,"^D",92,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$n","^2O"]]]]]],"~$count-permutations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",345,"^C",7,"^D",345,"^E",25,"^L",["^M",["^N",["^M",[["~$l"]]]]],"^10","Counts the number of distinct permutations of l"],"^8","~$clojure.math.combinatorics/count-permutations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",25,"^S",["^M",[["~$l"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",345,"^D",345,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$l"]]]]],"^10","Counts the number of distinct permutations of l"],"~$vec-lex-permutations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",249,"^C",8,"^D",249,"^E",28,"^K",true,"^L",["^M",["^N",["^M",[["~$v"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/vec-lex-permutations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",28,"^S",["^M",[["~$v"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",249,"^D",249,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$v"]]]]]],"~$list-index",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",588,"^C",8,"^D",588,"^E",18,"^K",true,"^L",["^M",["^N",["^M",[["~$l","~$item"]]]]],"^10","The opposite of nth, i.e., from an item in a list, find the n"],"^K",true,"^8","~$clojure.math.combinatorics/list-index","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",18,"^S",["^M",[["~$l","^2V"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",588,"^D",588,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$l","^2V"]]]]],"^10","The opposite of nth, i.e., from an item in a list, find the n"],"~$combinations",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",177,"^C",7,"^D",177,"^E",19,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","All the unique ways of taking t different elements from items"],"^8","~$clojure.math.combinatorics/combinations","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",19,"^S",["^M",[["^[","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",177,"^D",177,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","All the unique ways of taking t different elements from items"],"~$count-combinations-unmemoized",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",488,"^C",8,"^D",488,"^E",37,"^K",true,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"^K",true,"^8","~$clojure.math.combinatorics/count-combinations-unmemoized","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",37,"^S",["^M",[["^[","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",488,"^D",488,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$t"]]]]],"^10","We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."],"~$iter-perm",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",234,"^C",8,"^D",234,"^E",17,"^K",true,"^L",["^M",["^N",["^M",[["~$v"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/iter-perm","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",17,"^S",["^M",[["~$v"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",234,"^D",234,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$v"]]]]]],"^7",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",639,"^C",8,"^D",639,"^E",14,"^K",true,"^L",["^M",["^N",["^M",[["~$vec","~$index","~$f"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/update","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",14,"^S",["^M",[["^32","^33","~$f"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",639,"^D",639,"^V",3,"^W",true,"^L",["^M",["^N",["^M",[["^32","^33","~$f"]]]]]],"~$*'",["^ ","^8","~$clojure.math.combinatorics/*'","^A","resources/public/js/out/clojure/math/combinatorics.cljc","^B",81,"^C",10,"^D",81,"^E",17,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",81,"^C",15,"^D",81,"^E",17],"^G","^H"],"~$next-distribution",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",126,"^C",8,"^D",126,"^E",25,"^K",true,"^L",["^M",["^N",["^M",[["~$m","~$total","~$distribution"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/next-distribution","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",25,"^S",["^M",[["~$m","^38","^39"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",126,"^D",126,"^V",3,"^W",true,"^L",["^M",["^N",["^M",[["~$m","^38","^39"]]]]]],"~$index-remainder",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",368,"^C",8,"^D",368,"^E",23,"^K",true,"^L",["^M",["^N",["^M",[["~$perm-numbers","~$n"]]]]],"^10","Finds the index and remainder from the initial-perm-numbers."],"^K",true,"^8","~$clojure.math.combinatorics/index-remainder","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",23,"^S",["^M",[["^3<","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",368,"^D",368,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^3<","~$n"]]]]],"^10","Finds the index and remainder from the initial-perm-numbers."],"~$distribute",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",112,"^C",8,"^D",112,"^E",18,"^K",true,"^L",["^M",["^N",["^M",[["~$m","^33","^38","^39","~$already-distributed"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/distribute","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",18,"^S",["^M",[["~$m","^33","^38","^39","^3?"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",112,"^D",112,"^V",5,"^W",true,"^L",["^M",["^N",["^M",[["~$m","^33","^38","^39","^3?"]]]]]],"~$count-combinations-from-frequencies",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",473,"^C",25,"^D",473,"^E",60,"~:dynamic",true,"^K",true,"^L",["^M",["^N",["^M",[["^1;","~$t"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/count-combinations-from-frequencies","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",60,"^S",["^M",[["^1;","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^3B",true,"^B",473,"^D",473,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^1;","~$t"]]]]]],"~$multi-perm",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",270,"^C",8,"^D",270,"^E",18,"^K",true,"^L",["^M",["^N",["^M",[["~$l"]]]]],"^10","Handles the case when you want the permutations of a list with duplicate items."],"^K",true,"^8","~$clojure.math.combinatorics/multi-perm","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",18,"^S",["^M",[["~$l"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",270,"^D",270,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$l"]]]]],"^10","Handles the case when you want the permutations of a list with duplicate items."],"~$nth-permutation-distinct",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",321,"^C",8,"^D",321,"^E",32,"^K",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"^K",true,"^8","~$clojure.math.combinatorics/nth-permutation-distinct","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",32,"^S",["^M",[["~$l","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",321,"^D",321,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$l","~$n"]]]]],"^10","Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"],"~$nth-subset",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",573,"^C",7,"^D",573,"^E",17,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]]],"^8","~$clojure.math.combinatorics/nth-subset","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",17,"^S",["^M",[["^[","~$n"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",573,"^D",573,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["^[","~$n"]]]]]],"~$subsets",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",202,"^C",7,"^D",202,"^E",14,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","All the subsets of items"],"^8","~$clojure.math.combinatorics/subsets","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",14,"^S",["^M",[["^["]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",202,"^D",202,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","All the subsets of items"],"~$m6",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",871,"^C",8,"^D",871,"^E",10,"^K",true,"^L",["^M",["^N",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/m6","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",10,"^S",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",871,"^D",871,"^V",11,"^W",true,"^L",["^M",["^N",["^M",[["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]]],"~$multi-comb",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",164,"^C",8,"^D",164,"^E",18,"^K",true,"^L",["^M",["^N",["^M",[["~$l","~$t"]]]]],"^10","Handles the case when you want the combinations of a list with duplicate items."],"^K",true,"^8","~$clojure.math.combinatorics/multi-comb","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",18,"^S",["^M",[["~$l","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",164,"^D",164,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$l","~$t"]]]]],"^10","Handles the case when you want the combinations of a list with duplicate items."],"~$multiset-partitions-M",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",772,"^C",8,"^D",772,"^E",29,"^K",true,"^L",["^M",["^N",["^M",[["~$multiset","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]]],"^14",["^ ","^R",false,"^V",11,"^S",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^L",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^U",["^M",[null,null]]]],"^K",true,"^8","~$clojure.math.combinatorics/multiset-partitions-M","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",29,"^14",["^ ","^R",false,"^V",11,"^S",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^L",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^U",["^M",[null,null]]],"^S",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",772,"^D",772,"^V",11,"^W",true,"^L",["^M",[["^3Q","~$r","~$s"],["~$n","~$m","~$f","~$c","~$u","~$v","~$a","~$b","~$l","~$r","~$s"]]]],"~$bounded-distributions",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",153,"^C",8,"^D",153,"^E",29,"^K",true,"^L",["^M",["^N",["^M",[["~$m","~$t"]]]]]],"^K",true,"^8","~$clojure.math.combinatorics/bounded-distributions","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",29,"^S",["^M",[["~$m","~$t"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",153,"^D",153,"^V",2,"^W",true,"^L",["^M",["^N",["^M",[["~$m","~$t"]]]]]],"~$unchunk",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",190,"^C",8,"^D",190,"^E",15,"^K",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"^K",true,"^8","~$clojure.math.combinatorics/unchunk","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",15,"^S",["^M",[["~$s"]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",190,"^D",190,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["~$s"]]]]],"^10","Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."],"~$permutation-index",["^ ","^J",null,"^F",["^ ","^A","/Users/davidswift/Documents/Projects/yugiohcardeffectbuilder/resources/public/js/out/clojure/math/combinatorics.cljc","^B",614,"^C",7,"^D",614,"^E",24,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."],"^8","~$clojure.math.combinatorics/permutation-index","^R",false,"^A","resources/public/js/out/clojure/math/combinatorics.cljc","^E",24,"^S",["^M",[["^["]]],"^T",null,"^U",["^M",[null,null]],"^C",1,"^B",614,"^D",614,"^V",1,"^W",true,"^L",["^M",["^N",["^M",[["^["]]]]],"^10","Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^1A","~:else","^1C"]],"~:order",["^41","^1A","^1C"]],"^10","Efficient, functional algorithms for generating lazy\nsequences for common combinatorial functions. (See the source code \nfor a longer description.)"]